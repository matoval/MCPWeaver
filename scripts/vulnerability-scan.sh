#!/bin/bash

# Automated Vulnerability Scanning for MCPWeaver
# Integrates multiple vulnerability scanners and databases

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(cd "${SCRIPT_DIR}/.." && pwd)"
SCAN_RESULTS_DIR="${PROJECT_DIR}/vulnerability-scans"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
CONFIG_FILE="${SCRIPT_DIR}/vulnerability-scan.config"

# Default configuration
ENABLE_GOSEC="${ENABLE_GOSEC:-true}"
ENABLE_NANCY="${ENABLE_NANCY:-true}"
ENABLE_GOVULNCHECK="${ENABLE_GOVULNCHECK:-true}"
ENABLE_TRIVY="${ENABLE_TRIVY:-true}"
ENABLE_SEMGREP="${ENABLE_SEMGREP:-true}"
ENABLE_SNYK="${ENABLE_SNYK:-false}"  # Requires API key
ENABLE_CODEQL="${ENABLE_CODEQL:-false}"  # Requires GitHub integration

# Severity thresholds
FAIL_ON_HIGH="${FAIL_ON_HIGH:-true}"
FAIL_ON_MEDIUM="${FAIL_ON_MEDIUM:-false}"
FAIL_ON_LOW="${FAIL_ON_LOW:-false}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

info() {
    echo -e "${PURPLE}[INFO]${NC} $1"
}

# Load configuration if exists
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        log "Loading configuration from $CONFIG_FILE"
        # shellcheck source=/dev/null
        source "$CONFIG_FILE"
    fi
}

# Create scan results directory
create_scan_dir() {
    mkdir -p "$SCAN_RESULTS_DIR"
    log "Created scan results directory: $SCAN_RESULTS_DIR"
}

# Check if required tools are installed
check_prerequisites() {
    log "Checking prerequisites..."
    
    local missing_tools=()
    
    # Check Go
    if ! command -v go >/dev/null 2>&1; then
        missing_tools+=("go")
    fi
    
    # Check optional tools
    [ "$ENABLE_GOSEC" = "true" ] && ! command -v gosec >/dev/null 2>&1 && missing_tools+=("gosec")
    [ "$ENABLE_NANCY" = "true" ] && ! command -v nancy >/dev/null 2>&1 && missing_tools+=("nancy")
    [ "$ENABLE_GOVULNCHECK" = "true" ] && ! command -v govulncheck >/dev/null 2>&1 && missing_tools+=("govulncheck")
    [ "$ENABLE_TRIVY" = "true" ] && ! command -v trivy >/dev/null 2>&1 && missing_tools+=("trivy")
    [ "$ENABLE_SEMGREP" = "true" ] && ! command -v semgrep >/dev/null 2>&1 && missing_tools+=("semgrep")
    [ "$ENABLE_SNYK" = "true" ] && ! command -v snyk >/dev/null 2>&1 && missing_tools+=("snyk")
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        warn "Missing tools: ${missing_tools[*]}"
        info "Install missing tools:"
        for tool in "${missing_tools[@]}"; do
            case $tool in
                "gosec")
                    echo "  go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest"
                    ;;
                "nancy")
                    echo "  go install github.com/sonatypecommunity/nancy@latest"
                    ;;
                "govulncheck")
                    echo "  go install golang.org/x/vuln/cmd/govulncheck@latest"
                    ;;
                "trivy")
                    echo "  See: https://aquasecurity.github.io/trivy/latest/getting-started/installation/"
                    ;;
                "semgrep")
                    echo "  pip install semgrep"
                    ;;
                "snyk")
                    echo "  npm install -g snyk"
                    ;;
            esac
        done
        echo ""
    fi
    
    success "Prerequisites check completed"
}

# Run gosec security scanner
run_gosec() {
    if [ "$ENABLE_GOSEC" != "true" ] || ! command -v gosec >/dev/null 2>&1; then
        return 0
    fi
    
    log "Running gosec security scanner..."
    
    local output_json="$SCAN_RESULTS_DIR/gosec-${TIMESTAMP}.json"
    local output_text="$SCAN_RESULTS_DIR/gosec-${TIMESTAMP}.txt"
    local output_sarif="$SCAN_RESULTS_DIR/gosec-${TIMESTAMP}.sarif"
    
    cd "$PROJECT_DIR"
    
    # Run gosec with multiple output formats
    if gosec -fmt json -out "$output_json" ./...; then
        success "gosec completed successfully"
    else
        warn "gosec found security issues"
    fi
    
    # Generate human-readable report
    gosec -fmt text -out "$output_text" ./... || true
    
    # Generate SARIF format for integration with other tools
    gosec -fmt sarif -out "$output_sarif" ./... || true
    
    # Parse results and check severity
    if [ -f "$output_json" ]; then
        local high_count medium_count low_count
        high_count=$(jq -r '.Issues[] | select(.severity == "HIGH") | .severity' "$output_json" 2>/dev/null | wc -l || echo "0")
        medium_count=$(jq -r '.Issues[] | select(.severity == "MEDIUM") | .severity' "$output_json" 2>/dev/null | wc -l || echo "0")
        low_count=$(jq -r '.Issues[] | select(.severity == "LOW") | .severity' "$output_json" 2>/dev/null | wc -l || echo "0")
        
        info "gosec results: HIGH=$high_count, MEDIUM=$medium_count, LOW=$low_count"
        
        # Store results for final summary
        echo "gosec,$high_count,$medium_count,$low_count" >> "$SCAN_RESULTS_DIR/vulnerability-summary-${TIMESTAMP}.csv"
    fi
}

# Run nancy dependency scanner
run_nancy() {
    if [ "$ENABLE_NANCY" != "true" ] || ! command -v nancy >/dev/null 2>&1; then
        return 0
    fi
    
    log "Running nancy dependency vulnerability scanner..."
    
    local output_json="$SCAN_RESULTS_DIR/nancy-${TIMESTAMP}.json"
    local output_text="$SCAN_RESULTS_DIR/nancy-${TIMESTAMP}.txt"
    
    cd "$PROJECT_DIR"
    
    # Generate dependency list and scan
    if go list -json -deps ./... | nancy sleuth -o "$output_json"; then
        success "nancy completed successfully"
    else
        warn "nancy found vulnerable dependencies"
    fi
    
    # Generate human-readable report
    go list -json -deps ./... | nancy sleuth > "$output_text" 2>&1 || true
    
    # Parse results
    if [ -f "$output_json" ]; then
        local vuln_count
        vuln_count=$(jq -r '.vulnerable | length' "$output_json" 2>/dev/null || echo "0")
        info "nancy results: Vulnerable dependencies=$vuln_count"
        
        # Store results (treat all vulnerabilities as HIGH for dependencies)
        echo "nancy,$vuln_count,0,0" >> "$SCAN_RESULTS_DIR/vulnerability-summary-${TIMESTAMP}.csv"
    fi
}

# Run govulncheck
run_govulncheck() {
    if [ "$ENABLE_GOVULNCHECK" != "true" ] || ! command -v govulncheck >/dev/null 2>&1; then
        return 0
    fi
    
    log "Running govulncheck..."
    
    local output_json="$SCAN_RESULTS_DIR/govulncheck-${TIMESTAMP}.json"
    local output_text="$SCAN_RESULTS_DIR/govulncheck-${TIMESTAMP}.txt"
    
    cd "$PROJECT_DIR"
    
    # Run govulncheck
    if govulncheck -json ./... > "$output_json" 2>&1; then
        success "govulncheck completed successfully"
    else
        warn "govulncheck found vulnerabilities"
    fi
    
    # Generate human-readable report
    govulncheck ./... > "$output_text" 2>&1 || true
    
    # Parse results
    if [ -f "$output_json" ]; then
        local vuln_count
        vuln_count=$(grep -c '"type":"finding"' "$output_json" 2>/dev/null || echo "0")
        info "govulncheck results: Vulnerabilities=$vuln_count"
        
        # Store results (treat all vulnerabilities as HIGH)
        echo "govulncheck,$vuln_count,0,0" >> "$SCAN_RESULTS_DIR/vulnerability-summary-${TIMESTAMP}.csv"
    fi
}

# Run trivy scanner
run_trivy() {
    if [ "$ENABLE_TRIVY" != "true" ] || ! command -v trivy >/dev/null 2>&1; then
        return 0
    fi
    
    log "Running trivy vulnerability scanner..."
    
    local output_json="$SCAN_RESULTS_DIR/trivy-${TIMESTAMP}.json"
    local output_table="$SCAN_RESULTS_DIR/trivy-${TIMESTAMP}.txt"
    
    cd "$PROJECT_DIR"
    
    # Scan filesystem
    if trivy fs --format json --output "$output_json" .; then
        success "trivy filesystem scan completed successfully"
    else
        warn "trivy found vulnerabilities in filesystem"
    fi
    
    # Generate human-readable report
    trivy fs --format table --output "$output_table" . || true
    
    # If Docker is available, also scan any built images
    if command -v docker >/dev/null 2>&1 && [ -f "Dockerfile" ]; then
        log "Running trivy container scan..."
        
        # Build a test image
        docker build -t mcpweaver-vuln-test . > /dev/null 2>&1 || true
        
        if docker images | grep -q mcpweaver-vuln-test; then
            trivy image --format json --output "$SCAN_RESULTS_DIR/trivy-container-${TIMESTAMP}.json" mcpweaver-vuln-test || true
            trivy image --format table --output "$SCAN_RESULTS_DIR/trivy-container-${TIMESTAMP}.txt" mcpweaver-vuln-test || true
            
            # Clean up test image
            docker rmi mcpweaver-vuln-test > /dev/null 2>&1 || true
        fi
    fi
    
    # Parse results
    if [ -f "$output_json" ]; then
        local high_count medium_count low_count
        high_count=$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | .Severity' "$output_json" 2>/dev/null | wc -l || echo "0")
        medium_count=$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM") | .Severity' "$output_json" 2>/dev/null | wc -l || echo "0")
        low_count=$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW") | .Severity' "$output_json" 2>/dev/null | wc -l || echo "0")
        
        info "trivy results: HIGH=$high_count, MEDIUM=$medium_count, LOW=$low_count"
        
        # Store results
        echo "trivy,$high_count,$medium_count,$low_count" >> "$SCAN_RESULTS_DIR/vulnerability-summary-${TIMESTAMP}.csv"
    fi
}

# Run semgrep static analysis
run_semgrep() {
    if [ "$ENABLE_SEMGREP" != "true" ] || ! command -v semgrep >/dev/null 2>&1; then
        return 0
    fi
    
    log "Running semgrep static analysis..."
    
    local output_json="$SCAN_RESULTS_DIR/semgrep-${TIMESTAMP}.json"
    local output_text="$SCAN_RESULTS_DIR/semgrep-${TIMESTAMP}.txt"
    local output_sarif="$SCAN_RESULTS_DIR/semgrep-${TIMESTAMP}.sarif"
    
    cd "$PROJECT_DIR"
    
    # Run semgrep with security rules
    if semgrep --config=auto --json --output="$output_json" .; then
        success "semgrep completed successfully"
    else
        warn "semgrep found security issues"
    fi
    
    # Generate human-readable report
    semgrep --config=auto --output="$output_text" . || true
    
    # Generate SARIF format
    semgrep --config=auto --sarif --output="$output_sarif" . || true
    
    # Parse results
    if [ -f "$output_json" ]; then
        local high_count medium_count low_count
        high_count=$(jq -r '.results[] | select(.extra.severity == "ERROR") | .extra.severity' "$output_json" 2>/dev/null | wc -l || echo "0")
        medium_count=$(jq -r '.results[] | select(.extra.severity == "WARNING") | .extra.severity' "$output_json" 2>/dev/null | wc -l || echo "0")
        low_count=$(jq -r '.results[] | select(.extra.severity == "INFO") | .extra.severity' "$output_json" 2>/dev/null | wc -l || echo "0")
        
        info "semgrep results: ERROR=$high_count, WARNING=$medium_count, INFO=$low_count"
        
        # Store results
        echo "semgrep,$high_count,$medium_count,$low_count" >> "$SCAN_RESULTS_DIR/vulnerability-summary-${TIMESTAMP}.csv"
    fi
}

# Run snyk scanner (if API key is available)
run_snyk() {
    if [ "$ENABLE_SNYK" != "true" ] || ! command -v snyk >/dev/null 2>&1; then
        return 0
    fi
    
    # Check if authenticated
    if ! snyk auth --check >/dev/null 2>&1; then
        warn "Snyk authentication required. Run 'snyk auth' first."
        return 0
    fi
    
    log "Running snyk vulnerability scanner..."
    
    local output_json="$SCAN_RESULTS_DIR/snyk-${TIMESTAMP}.json"
    local output_text="$SCAN_RESULTS_DIR/snyk-${TIMESTAMP}.txt"
    
    cd "$PROJECT_DIR"
    
    # Test Go dependencies
    if snyk test --json > "$output_json" 2>&1; then
        success "snyk completed successfully"
    else
        warn "snyk found vulnerabilities"
    fi
    
    # Generate human-readable report
    snyk test > "$output_text" 2>&1 || true
    
    # Test code quality
    snyk code test --json > "$SCAN_RESULTS_DIR/snyk-code-${TIMESTAMP}.json" 2>&1 || true
    snyk code test > "$SCAN_RESULTS_DIR/snyk-code-${TIMESTAMP}.txt" 2>&1 || true
    
    # Parse results
    if [ -f "$output_json" ]; then
        local high_count medium_count low_count
        high_count=$(jq -r '.vulnerabilities[] | select(.severity == "high") | .severity' "$output_json" 2>/dev/null | wc -l || echo "0")
        medium_count=$(jq -r '.vulnerabilities[] | select(.severity == "medium") | .severity' "$output_json" 2>/dev/null | wc -l || echo "0")
        low_count=$(jq -r '.vulnerabilities[] | select(.severity == "low") | .severity' "$output_json" 2>/dev/null | wc -l || echo "0")
        
        info "snyk results: HIGH=$high_count, MEDIUM=$medium_count, LOW=$low_count"
        
        # Store results
        echo "snyk,$high_count,$medium_count,$low_count" >> "$SCAN_RESULTS_DIR/vulnerability-summary-${TIMESTAMP}.csv"
    fi
}

# Generate vulnerability database update
update_vulnerability_databases() {
    log "Updating vulnerability databases..."
    
    # Update trivy database
    if command -v trivy >/dev/null 2>&1; then
        trivy --cache-dir "$HOME/.cache/trivy" image --download-db-only > /dev/null 2>&1 || true
    fi
    
    # Update Go vulnerability database
    if command -v govulncheck >/dev/null 2>&1; then
        govulncheck -db https://vuln.go.dev ./... > /dev/null 2>&1 || true
    fi
    
    success "Vulnerability databases updated"
}

# Generate comprehensive report
generate_comprehensive_report() {
    log "Generating comprehensive vulnerability report..."
    
    local report_file="$SCAN_RESULTS_DIR/vulnerability-report-${TIMESTAMP}.md"
    local summary_file="$SCAN_RESULTS_DIR/vulnerability-summary-${TIMESTAMP}.csv"
    
    # Initialize CSV header if not exists
    if [ ! -f "$summary_file" ]; then
        echo "scanner,high,medium,low" > "$summary_file"
    fi
    
    {
        echo "# Vulnerability Scan Report"
        echo "**Generated:** $(date)"
        echo "**Project:** MCPWeaver"
        echo "**Scan ID:** ${TIMESTAMP}"
        echo ""
        
        echo "## Executive Summary"
        
        # Calculate totals
        local total_high=0 total_medium=0 total_low=0
        if [ -f "$summary_file" ]; then
            while IFS=',' read -r scanner high medium low; do
                if [ "$scanner" != "scanner" ]; then  # Skip header
                    total_high=$((total_high + high))
                    total_medium=$((total_medium + medium))
                    total_low=$((total_low + low))
                fi
            done < "$summary_file"
        fi
        
        echo "- **Total High Severity:** $total_high"
        echo "- **Total Medium Severity:** $total_medium"
        echo "- **Total Low Severity:** $total_low"
        echo ""
        
        # Risk assessment
        if [ $total_high -gt 0 ]; then
            echo "🔴 **Risk Level: HIGH** - Immediate action required"
        elif [ $total_medium -gt 5 ]; then
            echo "🟠 **Risk Level: MEDIUM** - Address within this sprint"
        elif [ $total_medium -gt 0 ] || [ $total_low -gt 10 ]; then
            echo "🟡 **Risk Level: LOW** - Address in upcoming sprint"
        else
            echo "🟢 **Risk Level: MINIMAL** - Continue monitoring"
        fi
        echo ""
        
        echo "## Scanner Results"
        
        # Detail results by scanner
        if [ -f "$summary_file" ]; then
            echo "| Scanner | High | Medium | Low | Status |"
            echo "|---------|------|--------|-----|--------|"
            
            while IFS=',' read -r scanner high medium low; do
                if [ "$scanner" != "scanner" ]; then  # Skip header
                    local status="✅ Pass"
                    if [ "$high" -gt 0 ]; then
                        status="❌ Fail"
                    elif [ "$medium" -gt 3 ]; then
                        status="⚠️  Review"
                    fi
                    echo "| $scanner | $high | $medium | $low | $status |"
                fi
            done < "$summary_file"
        fi
        echo ""
        
        echo "## Detailed Findings"
        
        # Link to detailed reports
        echo "### Static Analysis Security Testing (SAST)"
        [ -f "$SCAN_RESULTS_DIR/gosec-${TIMESTAMP}.txt" ] && echo "- [gosec Report](gosec-${TIMESTAMP}.txt)"
        [ -f "$SCAN_RESULTS_DIR/semgrep-${TIMESTAMP}.txt" ] && echo "- [semgrep Report](semgrep-${TIMESTAMP}.txt)"
        echo ""
        
        echo "### Dependency Vulnerability Analysis"
        [ -f "$SCAN_RESULTS_DIR/nancy-${TIMESTAMP}.txt" ] && echo "- [nancy Report](nancy-${TIMESTAMP}.txt)"
        [ -f "$SCAN_RESULTS_DIR/govulncheck-${TIMESTAMP}.txt" ] && echo "- [govulncheck Report](govulncheck-${TIMESTAMP}.txt)"
        [ -f "$SCAN_RESULTS_DIR/snyk-${TIMESTAMP}.txt" ] && echo "- [snyk Report](snyk-${TIMESTAMP}.txt)"
        echo ""
        
        echo "### Infrastructure & Container Security"
        [ -f "$SCAN_RESULTS_DIR/trivy-${TIMESTAMP}.txt" ] && echo "- [trivy Filesystem Report](trivy-${TIMESTAMP}.txt)"
        [ -f "$SCAN_RESULTS_DIR/trivy-container-${TIMESTAMP}.txt" ] && echo "- [trivy Container Report](trivy-container-${TIMESTAMP}.txt)"
        echo ""
        
        echo "## Recommendations"
        
        if [ $total_high -gt 0 ]; then
            echo "### Immediate Actions (High Priority)"
            echo "1. Review all HIGH severity findings immediately"
            echo "2. Patch vulnerable dependencies"
            echo "3. Fix security code issues"
            echo "4. Re-run scans after fixes"
            echo ""
        fi
        
        if [ $total_medium -gt 0 ]; then
            echo "### Short-term Actions (Medium Priority)"
            echo "1. Plan remediation for MEDIUM severity issues"
            echo "2. Update dependencies to latest secure versions"
            echo "3. Review and enhance security practices"
            echo ""
        fi
        
        echo "### Long-term Actions"
        echo "1. Implement automated vulnerability scanning in CI/CD"
        echo "2. Set up vulnerability monitoring and alerting"
        echo "3. Regular security training for development team"
        echo "4. Establish security review process for new code"
        echo ""
        
        echo "## Scan Configuration"
        echo "- **gosec:** ${ENABLE_GOSEC}"
        echo "- **nancy:** ${ENABLE_NANCY}"
        echo "- **govulncheck:** ${ENABLE_GOVULNCHECK}"
        echo "- **trivy:** ${ENABLE_TRIVY}"
        echo "- **semgrep:** ${ENABLE_SEMGREP}"
        echo "- **snyk:** ${ENABLE_SNYK}"
        echo ""
        
        echo "## Generated Files"
        echo "All scan results are available in: \`$SCAN_RESULTS_DIR\`"
        echo ""
        find "$SCAN_RESULTS_DIR" -name "*${TIMESTAMP}*" -type f | sort | while read -r file; do
            echo "- \`$(basename "$file")\`"
        done
        
    } > "$report_file"
    
    success "Comprehensive report generated: $report_file"
}

# Check scan results and determine exit code
check_results_and_exit() {
    local summary_file="$SCAN_RESULTS_DIR/vulnerability-summary-${TIMESTAMP}.csv"
    local should_fail=false
    
    if [ -f "$summary_file" ]; then
        local total_high=0 total_medium=0 total_low=0
        
        while IFS=',' read -r scanner high medium low; do
            if [ "$scanner" != "scanner" ]; then  # Skip header
                total_high=$((total_high + high))
                total_medium=$((total_medium + medium))
                total_low=$((total_low + low))
            fi
        done < "$summary_file"
        
        # Check thresholds
        if [ "$FAIL_ON_HIGH" = "true" ] && [ $total_high -gt 0 ]; then
            error "Scan failed: $total_high HIGH severity vulnerabilities found"
            should_fail=true
        fi
        
        if [ "$FAIL_ON_MEDIUM" = "true" ] && [ $total_medium -gt 0 ]; then
            error "Scan failed: $total_medium MEDIUM severity vulnerabilities found"
            should_fail=true
        fi
        
        if [ "$FAIL_ON_LOW" = "true" ] && [ $total_low -gt 0 ]; then
            error "Scan failed: $total_low LOW severity vulnerabilities found"
            should_fail=true
        fi
        
        # Summary
        info "Vulnerability scan summary: HIGH=$total_high, MEDIUM=$total_medium, LOW=$total_low"
    fi
    
    if [ "$should_fail" = "true" ]; then
        error "Vulnerability scan FAILED based on configured thresholds"
        exit 1
    else
        success "Vulnerability scan PASSED"
        exit 0
    fi
}

# Cleanup old scan results
cleanup_old_scans() {
    log "Cleaning up old scan results..."
    
    # Keep only the last 30 days of scans
    find "$SCAN_RESULTS_DIR" -name "vulnerability-report-*.md" -type f -mtime +30 -delete 2>/dev/null || true
    find "$SCAN_RESULTS_DIR" -name "*-20*.json" -type f -mtime +30 -delete 2>/dev/null || true
    find "$SCAN_RESULTS_DIR" -name "*-20*.txt" -type f -mtime +30 -delete 2>/dev/null || true
    
    success "Old scan results cleaned up"
}

# Main function
main() {
    log "Starting MCPWeaver Vulnerability Scanning Suite"
    log "Project Directory: $PROJECT_DIR"
    log "Scan Results Directory: $SCAN_RESULTS_DIR"
    
    # Load configuration
    load_config
    
    # Check if we're in the right directory
    if [ ! -f "$PROJECT_DIR/go.mod" ]; then
        error "go.mod not found. Please run this script from the MCPWeaver project root."
    fi
    
    # Setup
    create_scan_dir
    check_prerequisites
    
    # Update vulnerability databases
    update_vulnerability_databases
    
    # Initialize summary file
    echo "scanner,high,medium,low" > "$SCAN_RESULTS_DIR/vulnerability-summary-${TIMESTAMP}.csv"
    
    # Run all enabled scanners
    run_gosec
    run_nancy
    run_govulncheck
    run_trivy
    run_semgrep
    run_snyk
    
    # Generate reports
    generate_comprehensive_report
    
    # Cleanup
    cleanup_old_scans
    
    # Check results and exit with appropriate code
    check_results_and_exit
}

# Parse command line arguments
case "${1:-}" in
    "--help"|"-h")
        echo "MCPWeaver Vulnerability Scanning Suite"
        echo ""
        echo "Usage: $0 [options]"
        echo ""
        echo "Options:"
        echo "  --help, -h         Show this help message"
        echo "  --quick           Run quick scan (gosec + govulncheck only)"
        echo "  --full            Run full vulnerability scan (default)"
        echo "  --deps-only       Scan dependencies only"
        echo "  --sast-only       Run SAST tools only"
        echo "  --config FILE     Use custom configuration file"
        echo ""
        echo "Environment Variables:"
        echo "  ENABLE_GOSEC      Enable/disable gosec (default: true)"
        echo "  ENABLE_NANCY      Enable/disable nancy (default: true)"
        echo "  ENABLE_GOVULNCHECK Enable/disable govulncheck (default: true)"
        echo "  ENABLE_TRIVY      Enable/disable trivy (default: true)"
        echo "  ENABLE_SEMGREP    Enable/disable semgrep (default: true)"
        echo "  ENABLE_SNYK       Enable/disable snyk (default: false)"
        echo "  FAIL_ON_HIGH      Fail build on HIGH severity (default: true)"
        echo "  FAIL_ON_MEDIUM    Fail build on MEDIUM severity (default: false)"
        echo "  FAIL_ON_LOW       Fail build on LOW severity (default: false)"
        echo ""
        exit 0
        ;;
    "--quick")
        log "Running quick vulnerability scan..."
        ENABLE_NANCY="false"
        ENABLE_TRIVY="false"
        ENABLE_SEMGREP="false"
        ENABLE_SNYK="false"
        main
        ;;
    "--deps-only")
        log "Running dependency vulnerability scan only..."
        ENABLE_GOSEC="false"
        ENABLE_SEMGREP="false"
        main
        ;;
    "--sast-only")
        log "Running SAST tools only..."
        ENABLE_NANCY="false"
        ENABLE_GOVULNCHECK="false"
        ENABLE_TRIVY="false"
        main
        ;;
    "--config")
        if [ -n "${2:-}" ]; then
            CONFIG_FILE="$2"
            shift 2
            main
        else
            error "Config file path required"
        fi
        ;;
    "--full"|"")
        main
        ;;
    *)
        error "Unknown option: $1. Use --help for usage information."
        ;;
esac