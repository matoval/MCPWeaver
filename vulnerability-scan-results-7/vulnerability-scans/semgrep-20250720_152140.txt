                   
                   
┌─────────────────┐
│ 7 Code Findings │
└─────────────────┘
                               
    .github/workflows/build.yml
   ❯❯❱ yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
           41┆ run: |
           42┆   if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{
               github.event.inputs.version }}" ]]; then                            
           43┆     VERSION="${{ github.event.inputs.version }}"
           44┆   elif [[ "${{ github.ref_type }}" == "tag" ]]; then
           45┆     VERSION="${{ github.ref_name }}"
           46┆     VERSION=${VERSION#v}  # Remove 'v' prefix
           47┆     echo "should_release=true" >> $GITHUB_OUTPUT
           48┆   else
           49┆     VERSION="0.0.0-dev.$(git rev-list --count HEAD).$(git rev-parse --short HEAD)"
           50┆   fi
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
           56┆ run: |
           57┆   PLATFORMS="${{ github.event.inputs.platforms || 'all' }}"
           58┆
           59┆   if [[ "$PLATFORMS" == "all" ]]; then
           60┆     MATRIX='["windows-latest", "macos-latest", "ubuntu-latest"]'
           61┆   elif [[ "$PLATFORMS" == "windows" ]]; then
           62┆     MATRIX='["windows-latest"]'
           63┆   elif [[ "$PLATFORMS" == "macos" ]]; then
           64┆     MATRIX='["macos-latest"]'
           65┆   elif [[ "$PLATFORMS" == "linux" ]]; then
             [hid 7 additional lines, adjust with --max-lines-per-finding] 
                                       
    .github/workflows/security-scan.yml
   ❯❯❱ yaml.github-actions.security.run-shell-injection.run-shell-injection
          Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an  
          attacker to inject their own code into the runner. This would allow them to steal secrets and code. 
          `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use
          an intermediate environment variable with `env:` to store the data and use the environment variable 
          in the `run:` script. Be sure to use double-quotes the environment variable, like this: "$ENVVAR".  
          Details: https://sg.run/pkzk                                                                        
                                                                                                              
          140┆ run: |
          141┆   chmod +x ./scripts/vulnerability-scan.sh
          142┆   SCAN_TYPE="${{ github.event.inputs.scan_type || 'full' }}"
          143┆   case "$SCAN_TYPE" in
          144┆     "quick")
          145┆       ./scripts/vulnerability-scan.sh --quick
          146┆       ;;
          147┆     "deps-only")
          148┆       ./scripts/vulnerability-scan.sh --deps-only
          149┆       ;;
             [hid 7 additional lines, adjust with --max-lines-per-finding] 
          168┆ run: |
          169┆   echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          170┆   echo "" >> $GITHUB_STEP_SUMMARY
          171┆   echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          172┆   echo "**Scan Type:** ${{ github.event.inputs.scan_type || 'full' }}" >>
               $GITHUB_STEP_SUMMARY                                                     
          173┆   echo "" >> $GITHUB_STEP_SUMMARY
          174┆
          175┆   # Check for high severity issues
          176┆   high_issues=0
          177┆   medium_issues=0
             [hid 49 additional lines, adjust with --max-lines-per-finding] 
                                             
    frontend/src/utils/gracefulDegradation.ts
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          403┆ console.warn(`Feature "${feature}" has been degraded due to error:`, error);
                          
    internal/app/errors.go
    ❯❱ go.lang.security.audit.crypto.math_random.math-random-used
          Do not use `math/rand`. Use `crypto/rand` instead.
          Details: https://sg.run/6nK6                      
                                                            
           ▶▶┆ Autofix ▶ crypto/rand
            5┆ "math/rand"
                         
    internal/app/retry.go
    ❯❱ go.lang.security.audit.crypto.math_random.math-random-used
          Do not use `math/rand`. Use `crypto/rand` instead.
          Details: https://sg.run/6nK6                      
                                                            
           ▶▶┆ Autofix ▶ crypto/rand
            6┆ "math/rand"
